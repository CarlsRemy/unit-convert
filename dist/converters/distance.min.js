"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Foot=exports.Yard=exports.Mile=exports.Kilometer=exports.Meter=exports.Centimeter=exports.Millimeter=exports.Inch=void 0;const utils_ts_1=require("./utils.min.js"),Inch={toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:25400*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:254e5*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toMillimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:25.4*o;return(0,utils_ts_1._convert)(t,"millimeter",r)},toCentimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:2.54*o;return(0,utils_ts_1._convert)(t,"centimeter",r)}};exports.Inch=Inch;const Millimeter={toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e3*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e6*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toInch:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.0393701*o;return(0,utils_ts_1._convert)(t,"inch",r)},toCentimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:o/10;return(0,utils_ts_1._convert)(t,"centimeter",r)},toMeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:o/1e3;return(0,utils_ts_1._convert)(t,"meter",r)}};exports.Millimeter=Millimeter;const Centimeter={toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e4*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e7*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toMillimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:10*o;return(0,utils_ts_1._convert)(t,"millimeter",r)},toInch:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.393701*o;return(0,utils_ts_1._convert)(t,"inch",r)},toMeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:o/100;return(0,utils_ts_1._convert)(t,"meter",r)},toKilometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:o/1e5;return(0,utils_ts_1._convert)(t,"kilometer",r)},toMile:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:62137e-10*o;return(0,utils_ts_1._convert)(t,"mile",r)},toYard:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.0109361*o;return(0,utils_ts_1._convert)(t,"yard",r)},toFoot:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.0328084*o;return(0,utils_ts_1._convert)(t,"foot",r)}};exports.Centimeter=Centimeter;const Meter={toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e6*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e9*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toMillimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e3*o;return(0,utils_ts_1._convert)(t,"millimeter",r)},toCentimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:100*o;return(0,utils_ts_1._convert)(t,"centimeter",r)},toInch:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:39.3701*o;return(0,utils_ts_1._convert)(t,"inch",r)},toKilometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:o/1e3;return(0,utils_ts_1._convert)(t,"kilometer",r)},toMile:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.621371*o;return(0,utils_ts_1._convert)(t,"mile",r)},toYard:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1093*o;return(0,utils_ts_1._convert)(t,"yard",r)},toFoot:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:3280.84*o;return(0,utils_ts_1._convert)(t,"foot",r)}};exports.Meter=Meter;const Kilometer={toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e9*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e12*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toMillimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e6*o;return(0,utils_ts_1._convert)(t,"millimeter",r)},toCentimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e5*o;return(0,utils_ts_1._convert)(t,"centimeter",r)},toInch:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:39370.1*o;return(0,utils_ts_1._convert)(t,"inch",r)},toMeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1e3*o;return(0,utils_ts_1._convert)(t,"meter",r)},toMile:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.621371*o;return(0,utils_ts_1._convert)(t,"mile",r)},toYard:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1093.61*o;return(0,utils_ts_1._convert)(t,"yard",r)},toFoot:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:3280.84*o;return(0,utils_ts_1._convert)(t,"foot",r)}};exports.Kilometer=Kilometer;const Mile={toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1609344e6*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toMillimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1609344*o;return(0,utils_ts_1._convert)(t,"millimeter",r)},toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:160934e4*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toInch:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:63360*o;return(0,utils_ts_1._convert)(t,"inch",r)},toCentimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:160934*o;return(0,utils_ts_1._convert)(t,"centimeter",r)},toMeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1609.34*o;return(0,utils_ts_1._convert)(t,"meter",r)},toKilometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1.60934*o;return(0,utils_ts_1._convert)(t,"kilometer",r)},toYard:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:1760*o;return(0,utils_ts_1._convert)(t,"yard",r)},toFoot:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:5280*o;return(0,utils_ts_1._convert)(t,"foot",r)}};exports.Mile=Mile;const Yard={toNanometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:9144e5*o;return(0,utils_ts_1._convert)(t,"nanometer",r)},toInch:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:36*o;return(0,utils_ts_1._convert)(t,"inch",r)},toCentimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:91.44*o;return(0,utils_ts_1._convert)(t,"centimeter",r)},toMillimeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:914.4*o;return(0,utils_ts_1._convert)(t,"millimeter",r)},toMicrometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:914400*o;return(0,utils_ts_1._convert)(t,"micrometer",r)},toMeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.9144*o;return(0,utils_ts_1._convert)(t,"meter",r)},toKilometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:9144e-7*o;return(0,utils_ts_1._convert)(t,"kilometer",r)},toMile:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:568182e-9*o;return(0,utils_ts_1._convert)(t,"mile",r)},toFoot:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:3*o;return(0,utils_ts_1._convert)(t,"foot",r)}};exports.Yard=Yard;const Foot={toMeter:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.3048*o;return(0,utils_ts_1._convert)(t,"meter",r)},toKilometer:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:3048e-7*o;return(0,utils_ts_1._convert)(t,"kilometer",r)},toMile:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:189394e-9*o;return(0,utils_ts_1._convert)(t,"mile",r)},toYard:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const t=0==o?0:.333333*o;return(0,utils_ts_1._convert)(t,"yard",r)}};exports.Foot=Foot;