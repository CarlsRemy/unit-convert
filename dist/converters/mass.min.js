"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Ounce=exports.Stone=exports.Pound=exports.Microgram=exports.Milligram=exports.Ton=exports.Gram=exports.Kilogram=void 0;const utils_ts_1=require("./utils.min.js"),MicrogramConversion=(o,r={})=>{const n=(null==r?void 0:r.locale)||"en-US";let t="µg";const e={"es-Es":"microgramo","en-IN":"microgram","en-US":"Microgram","fr-FR":"microgramme","de-DE":"mikrogramm","it-IT":"microgrammo","pt-PT":"micrograma","ru-RU":"mикрограмм","zh-CN":"微克","ja-JP":"マイクログラム"},i={"es-Es":"microgramos","en-IN":"micrograms","en-US":"micrograms","fr-FR":"microgrammes","de-DE":"mikrogramm","it-IT":"microgrammi","pt-PT":"microgramas","ru-RU":"mикрограммы","zh-CN":"微克","ja-JP":"マイクログラム"};"long"===((null==r?void 0:r.unitDisplay)||"short")&&(t="Microgram",1==o?Object.keys(e).includes(n)&&(t=e[n]):(t="Micrograms",Object.keys(i).includes(n)&&(t=i[n])));return`${(0,utils_ts_1._convert)(o,"",r)} ${t}`},MilligramConversion=(o,r={})=>{const n=(null==r?void 0:r.locale)||"en-US";let t="mg";const e={"es-Es":"miligramo","en-IN":"milligram","en-US":"Milligram","fr-FR":"milligramme","de-DE":"milligramm","it-IT":"milligrammo","pt-PT":"miligrama","ru-RU":"миллиграмм","zh-CN":"毫克","ja-JP":"ミリグラム"},i={"es-Es":"miligramos","en-IN":"milligrams","en-US":"milligrams","fr-FR":"milligrammes","de-DE":"milligramm","it-IT":"milligrammi","pt-PT":"miligramas","ru-RU":"миллиграммы","zh-CN":"毫克","ja-JP":"ミリグラム"};"long"===((null==r?void 0:r.unitDisplay)||"short")&&(t="milligram",1==o?Object.keys(e).includes(n)&&(t=e[n]):(t="milligrams",Object.keys(i).includes(n)&&(t=i[n])));return`${(0,utils_ts_1._convert)(o,"",r)} ${t}`},Kilogram={toGram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e3*o;return(0,utils_ts_1._convert)(n,"gram",r)},toTon:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e3;return(0,utils_ts_1._convert)(n,"ton",r)},toMilligram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e6*o;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toMicrogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e9*o;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toOnce:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:35.274*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toPound:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:2.20462*o;return(0,utils_ts_1._convert)(n,"pound",r)},toStone:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:.157473*o;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Kilogram=Kilogram;const Gram={toKilogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e3;return(0,utils_ts_1._convert)(n,"kilogram",r)},toTon:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e6;return(0,utils_ts_1._convert)(n,"ton",r)},toMilligram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e3*o;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toMicrogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e6*o;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toOnce:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:.035274*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toPound:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:.00220462*o;return(0,utils_ts_1._convert)(n,"pound",r)},toStone:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:157473e-9*o;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Gram=Gram;const Ton={toKilogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e3*o;return(0,utils_ts_1._convert)(n,"kilogram",r)},toGram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e6*o;return(0,utils_ts_1._convert)(n,"gram",r)},toMilligram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e9*o;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toMicrogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e12*o;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toOnce:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:35274*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toPound:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:2204.62*o;return(0,utils_ts_1._convert)(n,"pound",r)},toStone:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:157.473*o;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Ton=Ton;const Milligram={toKilogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e6;return(0,utils_ts_1._convert)(n,"kilogram",r)},toTon:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e9;return(0,utils_ts_1._convert)(n,"ton",r)},toGram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e3;return(0,utils_ts_1._convert)(n,"gram",r)},toMicrogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1e3*o;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toOnce:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:35274e-9*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toPound:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:220462e-11*o;return(0,utils_ts_1._convert)(n,"pound",r)},toStone:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1.5747e-7*o;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Milligram=Milligram;const Microgram={toKilogram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e9;return(0,utils_ts_1._convert)(n,"kilogram",r)},toTon:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e12;return(0,utils_ts_1._convert)(n,"ton",r)},toGram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e6;return(0,utils_ts_1._convert)(n,"gram",r)},toMilligram:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1e3;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toOnce:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:3.5274e-8*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toPound:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:2.20462e-9*o;return(0,utils_ts_1._convert)(n,"pound",r)},toStone:(o=0,r={})=>{if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:1.5747e-10*o;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Microgram=Microgram;const Pound={toTon(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/2204.62;return(0,utils_ts_1._convert)(n,"ton",r)},toKilogram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/2.20462;return(0,utils_ts_1._convert)(n,"kilogram",r)},toGram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/.00220462;return(0,utils_ts_1._convert)(n,"gram",r)},toMilligram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/220462e-11;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toMicrogram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/2.20462e-9;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toOnce(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:16*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toStone(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/14;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Pound=Pound;const Ounce={toTon(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/35.274;return(0,utils_ts_1._convert)(n,"ton",r)},toKilogram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/35.274;return(0,utils_ts_1._convert)(n,"kilogram",r)},toGram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/.035274;return(0,utils_ts_1._convert)(n,"gram",r)},toMilligram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/35274e-9;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toMicrogram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/3.5274e-8;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toPound(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/16;return(0,utils_ts_1._convert)(n,"pound",r)},toStone(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/224;return(0,utils_ts_1._convert)(n,"stone",r)}};exports.Ounce=Ounce;const Stone={toTon(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/157.473;return(0,utils_ts_1._convert)(n,"ton",r)},toKilogram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/.157473;return(0,utils_ts_1._convert)(n,"kilogram",r)},toGram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/157473e-9;return(0,utils_ts_1._convert)(n,"gram",r)},toMilligram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1.5747e-7;return Object.keys(r).length>0&&"object"==typeof r?MilligramConversion(n,r):n},toMicrogram(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:o/1.5747e-10;return Object.keys(r).length>0&&"object"==typeof r?MicrogramConversion(n,r):n},toOnce(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:224*o;return(0,utils_ts_1._convert)(n,"ounce",r)},toPound(o=0,r={}){if(isNaN(o))throw new Error("El valor introducido no es un número válido.");const n=0==o?0:14*o;return(0,utils_ts_1._convert)(n,"pound",r)}};exports.Stone=Stone;